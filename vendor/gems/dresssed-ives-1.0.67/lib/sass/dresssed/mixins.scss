@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }

  @-moz-keyframes #{$animationName} {
    @content;
  }

  @-o-keyframes #{$animationName} {
    @content;
  }

  @keyframes #{$animationName} {
    @content;
  }
}

// Border Radius
// -------------

@mixin border-radius-left($radius: 5px) {
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-radius-right($radius: 5px) {
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}

@mixin border-radius-top($radius: 5px) {
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}

@mixin border-radius-bottom($radius: 5px) {
  border-bottom-left-radius: $radius;
  border-bottom-right-radius: $radius;
}

// Carets
// ------
@mixin horizontal-caret($side, $height: 9px, $width: 9px, $color: $white) {
  display: inline-block;
  width: 0;
  height: 0;
  text-indent: -99999px;
  // IE7 won't do the border trick if there's a text indent, but it doesn't
  // do the content that text-indent is hiding, either, so we're ok.
  *text-indent: 0;
  vertical-align: top;
  border-top: #{$height / 2} solid transparent;
  border-bottom: #{$height / 2} solid transparent;
  content: " ";
  position: relative;
  float: $side;
}

// Button backgrounds
// ------------------
@mixin buttonBackground($startColor, $endColor, $textColor: #fff, $textShadow: 0 -1px 0 rgba(0, 0, 0, 0.25)) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  @include gradientBar($startColor, $endColor, $textColor, $textShadow);
  @include reset-filter;
  outline: none;

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    //color: $textColor;
    background-color: $endColor;
    *background-color: darken($endColor, 5%);
  }

  // IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active,
  &.active {
    background-color: darken($endColor, 10%) \9;
  }
}

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($primaryColor, $secondaryColor, $textColor: #fff, $textShadow: 0 -1px 0 rgba(0, 0, 0, 0.25)) {
  color: $textColor;
  text-shadow: $textShadow;
  @include gradient-vertical($primaryColor, $secondaryColor);
  border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) fadein(rgba(0, 0, 0, 0.1), 15%);
}

//Prefixes definition
$webkit: true;
$o: true;
$moz: true;
$w3: true;
$ms: true;

//Gradient Mixin
@mixin gradient($mode, $direction, $from, $to, $oldDirection: null) {
  @if $webkit == true {
    @if $oldDirection != null {
      background-image: -webkit-gradient($mode, #{$oldDirection}, from($from), to($to));
    }
    background-image: -webkit-#{$mode}-gradient($direction, $from, $to);
  }

  @if $moz == true {
    background-image: -moz-#{$mode}-gradient($direction, $from, $to);
  }

  @if $o == true {
    background-image: -o-#{$mode}-gradient($direction, $from, $to);
  }

  @if $ms == true {
    background-image: -ms-#{$mode}-gradient($direction, $from, $to);
  }

  @if $w3 == true {
    background-image: #{$mode}-gradient($direction, $from, $to);
  }
}

@mixin alertBorder($color) {
  &.alert-top-border {
    border-top: 3px solid darken($color, 15%);
  }

  &.alert-bottom-border {
    border-bottom: 3px solid darken($color, 15%);
  }

  &.alert-left-border {
    border-left: 3px solid darken($color, 15%);
  }

  &.alert-right-border {
    border-right: 3px solid darken($color, 15%);
  }
}

// Brightness math based on:
//   http://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx

@function exponent($base, $exponent) {
  // reset value
  $value: $base;
  // positive intergers get multiplied
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base; } }
  // negitive intergers get divided. A number divided by itself is 1
  @if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base; } }
  // return the last value written
  @return $value;
}

@function pow($base, $exponent) {
  @return exponent($base, $exponent);
}

$iter: 50;
@function sqrt($number) {
  $guess: 4;
  $root: $guess;
  @for $i from 1 through $iter {
    $root: $root - (pow($root, 2) - $number) / (2 * $root);
  }
  @return $root;
}

$red-magic-number: 241;
$green-magic-number: 691;
$blue-magic-number: 68;
$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

@function brightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);

  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt((($red-component * $red-component * $red-magic-number) + ($green-component * $green-component * $green-magic-number) + ($blue-component * $blue-component * $blue-magic-number)) / $brightness-divisor);

  // Convert to percentage and return
  @return (100% * $number) / 255;
}

@function contrasting-color($color, $light, $dark) {
  @if brightness($color) < 65% {
    @return $light;
  } @else {
    @return $dark;
  }
}